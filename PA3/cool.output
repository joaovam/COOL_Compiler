Nonterminals useless in grammar

    formal_list
    nonempty_formal_list
    declaration
    expression_list
    nonempty_expression_list
    expression_semicolon_list
    expression


Terminals unused in grammar

    ELSE
    FI
    IF
    IN
    LET
    LOOP
    POOL
    THEN
    WHILE
    CASE
    ESAC
    OF
    DARROW
    NEW
    ISVOID
    STR_CONST
    INT_CONST
    BOOL_CONST
    ASSIGN
    NOT
    LE
    ERROR
    '.'
    '@'
    '~'
    '*'
    '/'
    '+'
    '-'
    '='
    '<'
    '('
    ')'
    ','


Rules useless in grammar

   12 feature: OBJECTID '(' formal_list ')' ':' TYPEID '{' expression '}' ';'
   13        | OBJECTID ':' TYPEID ASSIGN expression ';'

   14 formal_list: ε
   15            | nonempty_formal_list

   16 nonempty_formal_list: declaration
   17                     | formal_list ',' declaration

   18 declaration: OBJECTID ':' TYPEID

   19 expression_list: ε
   20                | nonempty_expression_list

   21 nonempty_expression_list: expression
   22                         | nonempty_expression_list ',' expression

   23 expression_semicolon_list: expression
   24                          | expression_semicolon_list ';' expression

   25 expression: OBJECTID ASSIGN expression
   26           | expression '.' OBJECTID '(' expression_list ')'
   27           | WHILE expression LOOP expression POOL
   28           | IF expression THEN expression ELSE expression FI
   29           | '{' expression_semicolon_list ';'
   30           | '{' expression_semicolon_list ';' error ';'
   31           | '{' expression_semicolon_list ';' error ';' expression_semicolon_list ';'
   32           | error ';' expression_semicolon_list ';'


Grammar

    0 $accept: program $end

    1 program: class_list

    2 class_list: class
    3           | class_list class

    4 class: CLASS TYPEID '{' feature_list '}' ';'
    5      | CLASS TYPEID INHERITS TYPEID '{' feature_list '}' ';'

    6 feature_list: ε
    7             | nonempty_feature_list

    8 nonempty_feature_list: feature
    9                      | nonempty_feature_list feature

   10 feature: OBJECTID ':' TYPEID ';'
   11        | error ';'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40)
    ')' (41)
    '*' (42)
    '+' (43)
    ',' (44)
    '-' (45)
    '.' (46)
    '/' (47)
    ':' (58) 10
    ';' (59) 4 5 10 11
    '<' (60)
    '=' (61)
    '@' (64)
    '{' (123) 4 5
    '}' (125) 4 5
    '~' (126)
    error (256) 11
    CLASS (258) 4 5
    ELSE (259)
    FI (260)
    IF (261)
    IN (262)
    INHERITS (263) 5
    LET (264)
    LOOP (265)
    POOL (266)
    THEN (267)
    WHILE (268)
    CASE (269)
    ESAC (270)
    OF (271)
    DARROW (272)
    NEW (273)
    ISVOID (274)
    STR_CONST <symbol> (275)
    INT_CONST <symbol> (276)
    BOOL_CONST <boolean> (277)
    TYPEID <symbol> (278) 4 5 10
    OBJECTID <symbol> (279) 10
    ASSIGN (280)
    NOT (281)
    LE (282)
    ERROR (283)


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program <program> (46)
        on left: 1
        on right: 0
    class_list <classes> (47)
        on left: 2 3
        on right: 1 3
    class <class_> (48)
        on left: 4 5
        on right: 2 3
    feature_list <features> (49)
        on left: 6 7
        on right: 4 5
    nonempty_feature_list <features> (50)
        on left: 8 9
        on right: 7 9
    feature <feature> (51)
        on left: 10 11
        on right: 8 9


State 0

    0 $accept: • program $end

    CLASS  shift, and go to state 1

    program     go to state 2
    class_list  go to state 3
    class       go to state 4


State 1

    4 class: CLASS • TYPEID '{' feature_list '}' ';'
    5      | CLASS • TYPEID INHERITS TYPEID '{' feature_list '}' ';'

    TYPEID  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: class_list •
    3 class_list: class_list • class

    CLASS  shift, and go to state 1

    $default  reduce using rule 1 (program)

    class  go to state 7


State 4

    2 class_list: class •

    $default  reduce using rule 2 (class_list)


State 5

    4 class: CLASS TYPEID • '{' feature_list '}' ';'
    5      | CLASS TYPEID • INHERITS TYPEID '{' feature_list '}' ';'

    INHERITS  shift, and go to state 8
    '{'       shift, and go to state 9


State 6

    0 $accept: program $end •

    $default  accept


State 7

    3 class_list: class_list class •

    $default  reduce using rule 3 (class_list)


State 8

    5 class: CLASS TYPEID INHERITS • TYPEID '{' feature_list '}' ';'

    TYPEID  shift, and go to state 10


State 9

    4 class: CLASS TYPEID '{' • feature_list '}' ';'

    error     shift, and go to state 11
    OBJECTID  shift, and go to state 12

    '}'  reduce using rule 6 (feature_list)

    feature_list           go to state 13
    nonempty_feature_list  go to state 14
    feature                go to state 15


State 10

    5 class: CLASS TYPEID INHERITS TYPEID • '{' feature_list '}' ';'

    '{'  shift, and go to state 16


State 11

   11 feature: error • ';'

    ';'  shift, and go to state 17


State 12

   10 feature: OBJECTID • ':' TYPEID ';'

    ':'  shift, and go to state 18


State 13

    4 class: CLASS TYPEID '{' feature_list • '}' ';'

    '}'  shift, and go to state 19


State 14

    7 feature_list: nonempty_feature_list •
    9 nonempty_feature_list: nonempty_feature_list • feature

    error     shift, and go to state 11
    OBJECTID  shift, and go to state 12

    '}'  reduce using rule 7 (feature_list)

    feature  go to state 20


State 15

    8 nonempty_feature_list: feature •

    $default  reduce using rule 8 (nonempty_feature_list)


State 16

    5 class: CLASS TYPEID INHERITS TYPEID '{' • feature_list '}' ';'

    error     shift, and go to state 11
    OBJECTID  shift, and go to state 12

    '}'  reduce using rule 6 (feature_list)

    feature_list           go to state 21
    nonempty_feature_list  go to state 14
    feature                go to state 15


State 17

   11 feature: error ';' •

    $default  reduce using rule 11 (feature)


State 18

   10 feature: OBJECTID ':' • TYPEID ';'

    TYPEID  shift, and go to state 22


State 19

    4 class: CLASS TYPEID '{' feature_list '}' • ';'

    ';'  shift, and go to state 23


State 20

    9 nonempty_feature_list: nonempty_feature_list feature •

    $default  reduce using rule 9 (nonempty_feature_list)


State 21

    5 class: CLASS TYPEID INHERITS TYPEID '{' feature_list • '}' ';'

    '}'  shift, and go to state 24


State 22

   10 feature: OBJECTID ':' TYPEID • ';'

    ';'  shift, and go to state 25


State 23

    4 class: CLASS TYPEID '{' feature_list '}' ';' •

    $default  reduce using rule 4 (class)


State 24

    5 class: CLASS TYPEID INHERITS TYPEID '{' feature_list '}' • ';'

    ';'  shift, and go to state 26


State 25

   10 feature: OBJECTID ':' TYPEID ';' •

    $default  reduce using rule 10 (feature)


State 26

    5 class: CLASS TYPEID INHERITS TYPEID '{' feature_list '}' ';' •

    $default  reduce using rule 5 (class)
